getgenv().Time = 0.2
getgenv().Torso = {18336182180, 18111595398} -- Updated Torso accessory ID
getgenv().RightArm = {108461909451929} -- Updated Right Arm accessory ID
getgenv().LeftArm = {81718001242235} -- Updated Left Arm accessory ID
getgenv().Head = {17438272014} -- Head accessory ID

local lastDeathPosition = nil
local loadstringExecuted = false -- Variable to track if loadstring has been executed

local function weldParts(part0, part1, c0, c1)
    local weld = Instance.new("Weld")
    weld.Part0 = part0
    weld.Part1 = part1
    weld.C0 = c0
    weld.C1 = c1
    weld.Parent = part0
    return weld
end

local function findAttachment(rootPart, name)
    for _, descendant in pairs(rootPart:GetDescendants()) do
        if descendant:IsA("Attachment") and descendant.Name == name then
            return descendant
        end
    end
end

local function addAccessoryToCharacter(accessoryId, parentPart)
    local accessory = game:GetObjects("rbxassetid://" .. tostring(accessoryId))[1]
    if not accessory then return end

    local character = game.Players.LocalPlayer.Character
    accessory.Parent = game.Workspace

    local handle = accessory:FindFirstChild("Handle")
    if handle then
        handle.CanCollide = false
        local attachment = handle:FindFirstChildOfClass("Attachment")
        if attachment then
            local parentAttachment = findAttachment(parentPart, attachment.Name)
            if parentAttachment then
                weldParts(parentPart, handle, parentAttachment.CFrame, attachment.CFrame)
            end
        else
            weldParts(parentPart, handle, CFrame.new(0, 0.5, 0), CFrame.new())
        end
    end
    accessory.Parent = character
end

local function loadAccessories(character)
    local torsoPart = character:FindFirstChild("UpperTorso") or character:FindFirstChild("Torso")
    if torsoPart then
        for _, accessoryId in ipairs(getgenv().Torso) do
            addAccessoryToCharacter(accessoryId, torsoPart)
        end
    end
    local rightArm = character:FindFirstChild("RightUpperArm") or character:FindFirstChild("Right Arm")
    if rightArm then
        for _, accessoryId in ipairs(getgenv().RightArm) do
            addAccessoryToCharacter(accessoryId, rightArm)
        end
    end
    local leftArm = character:FindFirstChild("LeftUpperArm") or character:FindFirstChild("Left Arm")
    if leftArm then
        for _, accessoryId in ipairs(getgenv().LeftArm) do
            addAccessoryToCharacter(accessoryId, leftArm)
        end
    end
    local headPart = character:FindFirstChild("Head")
    if headPart then
        for _, accessoryId in ipairs(getgenv().Head) do
            addAccessoryToCharacter(accessoryId, headPart)
        end
    end
end

local function loadClothing()
    local char = game.Players.LocalPlayer.Character
    pcall(function() char.Pants:Destroy() end)
    local pants = Instance.new("Pants")
    pants.Parent = char
    pants.PantsTemplate = 'rbxassetid://211753188' -- Updated Pants ID
    pants.Name = 'Pants'

    pcall(function() char.Shirt:Destroy() end)
    local shirt = Instance.new("Shirt")
    shirt.Parent = char
    shirt.ShirtTemplate = 'rbxassetid://1263584724' -- Updated Shirt ID
    shirt.Name = 'Shirt'
end

local function loadAura(character)
    for _, v in pairs(character:GetChildren()) do
        if v:IsA("Part") then
            local Attachment = Instance.new("Attachment")
            local ParticleEmitter = Instance.new("ParticleEmitter")

            Attachment.Parent = v
            Attachment.Name = "aura"

            ParticleEmitter.Brightness = 5
            ParticleEmitter.Color = ColorSequence.new({
                ColorSequenceKeypoint.new(0, Color3.new(0, 0, 0)), -- Black
                ColorSequenceKeypoint.new(1, Color3.new(1, 1, 1))  -- White
            })
            ParticleEmitter.Drag = 3
            ParticleEmitter.FlipbookLayout = Enum.ParticleFlipbookLayout.Grid4x4
            ParticleEmitter.FlipbookMode = Enum.ParticleFlipbookMode.OneShot
            ParticleEmitter.Lifetime = NumberRange.new(0.5, 0.5)
            ParticleEmitter.LightEmission = 1
            ParticleEmitter.LockedToPart = true
            ParticleEmitter.Rate = 5
            ParticleEmitter.Size = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 2),
                NumberSequenceKeypoint.new(1, 2)
            })
            ParticleEmitter.Speed = NumberRange.new(0, 0)
            ParticleEmitter.Texture = "rbxassetid://11844017484"
            ParticleEmitter.Transparency = NumberSequence.new({
                NumberSequenceKeypoint.new(0, 1),
                NumberSequenceKeypoint.new(0.198684, 0.491803),
                NumberSequenceKeypoint.new(0.501316, 0.513661),
                NumberSequenceKeypoint.new(0.798684, 0.497268),
                NumberSequenceKeypoint.new(1, 1)
            })
            ParticleEmitter.ZOffset = -1
            ParticleEmitter.Parent = Attachment
        end
        wait(0.1)
    end
end

-- Weapon code integration
local function loadWeapon(character)
    -- Remove any existing bat weapon and sheath
    local batWeapon = character:FindFirstChild("#NinjaKATANA")
    if batWeapon then
        batWeapon:Destroy()
    end

    local sheathed = character:FindFirstChild("Sheathe")
    if sheathed then
        sheathed:Destroy()
    end

    -- Load the new weapon model (bat model)
    local weapon = game:GetObjects("rbxassetid://18178649001")[1]
    weapon.CanCollide = false
    weapon.Parent = character

    -- Identify the correct hand based on the character's model
    local rightHand
    if character:FindFirstChild("Torso") then
        rightHand = character:WaitForChild("Right Arm")
    else
        rightHand = character:WaitForChild("RightHand")
    end

    -- Adjust the position and rotation of the weapon to move it more in front
    -- Rotate the weapon to face the front of the character
    local offsetCFrame = CFrame.new(0, -1, -2.2) * CFrame.Angles(math.rad(0), math.rad(90), math.rad(0))  -- 180-degree rotation on the Y axis to face forward

    -- Keep the weapon aligned with the hand
    game:GetService("RunService").RenderStepped:Connect(function()
        if character and character.Parent then
            weapon.CFrame = rightHand.CFrame * offsetCFrame
        end
    end)
end

local function onCharacterAdded(character)
    wait(getgenv().Time)
    
    -- Load weapon, accessories, and clothing first
    loadWeapon(character)
    loadAccessories(character)
    loadClothing()
    loadAura(character)

    -- Finally, load the loadstring after everything else (only once per execution)
    if not loadstringExecuted then
        loadstring(game:HttpGet("https://raw.githubusercontent.com/Reapvitalized/TSB/refs/heads/main/VOLTA.lua"))()
        loadstringExecuted = true
    end
end

local function onCharacterDied()
    local character = game.Players.LocalPlayer.Character
    if character then
        local humanoidRootPart = character:FindFirstChild("HumanoidRootPart")
        if humanoidRootPart then
            lastDeathPosition = humanoidRootPart.Position
        end
    end
end

local function onPlayerRespawn(character)
    if lastDeathPosition then
        character:SetPrimaryPartCFrame(CFrame.new(lastDeathPosition))
    end
    onCharacterAdded(character)
end

game.Players.LocalPlayer.CharacterAdded:Connect(function(character)
    character:WaitForChild("Humanoid").Died:Connect(onCharacterDied)
    onPlayerRespawn(character)
end)

if game.Players.LocalPlayer.Character then
    game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Died:Connect(onCharacterDied)
    onCharacterAdded(game.Players.LocalPlayer.Character)
end
local animationId = "rbxassetid://15099756132" -- Replace with your animation ID
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:FindFirstChildOfClass("Animator") or humanoid:WaitForChild("Animator")

local animation = Instance.new("Animation")
animation.AnimationId = animationId
local animationTrack = animator:LoadAnimation(animation)

local function isMoving()
    local velocity = humanoid.MoveDirection.Magnitude
    return velocity > 0
end

while true do
    if not isMoving() then
        if not animationTrack.IsPlaying then
            animationTrack:Play()
        end
    else
        if animationTrack.IsPlaying then
            animationTrack:Stop()
        end
    end
    wait(0.1)
end


--[[END OF IDLE ANIM]]

--[[Run Anim]]

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962443652" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962326593" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()
humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962326593" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962326593" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)
local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962326593" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()

local player = game.Players.LocalPlayer
local character = player.Character or player.CharacterAdded:Wait()
local humanoid = character:WaitForChild("Humanoid")
local animator = humanoid:WaitForChild("Animator")

local animationId = "rbxassetid://15962326593" -- Replace with your animation ID
local animation = Instance.new("Animation")
animation.AnimationId = animationId

local animationTrack
local isMoving = false

local function playAnimation()
    if not animationTrack then
        animationTrack = animator:LoadAnimation(animation)
    end
    
    if not isMoving then
        isMoving = true
        animationTrack:Play()
    end
end

local function stopAnimation()
    if isMoving and animationTrack then
        isMoving = false
        animationTrack:Stop()
    end
end

local function onHumanoidChanged()
    if humanoid.MoveDirection.Magnitude > 0 then
        playAnimation()
    else
        stopAnimation()
    end
end

humanoid:GetPropertyChangedSignal("MoveDirection"):Connect(onHumanoidChanged)

onHumanoidChanged()

--[[RUN ANIM END]]

--[[Execute Anims (Animations when you execute script]]

local p = game.Players.LocalPlayer
local Humanoid = p.Character:WaitForChild("Humanoid")

for _, animTrack in pairs(Humanoid:GetPlayingAnimationTracks()) do
    animTrack:Stop()
end

local AnimAnim = Instance.new("Animation")
AnimAnim.AnimationId = "rbxassetid://14611879113" -- Replace with your animation ID

local Anim = Humanoid:LoadAnimation(AnimAnim)

local startTime = 0.05

Anim:Play()
Anim:AdjustSpeed(0)
Anim.TimePosition = startTime
Anim:AdjustSpeed(1)
